buildscript {
    ext { 
            javaVersion = 1.8
            springBootVersion = '1.5.2.RELEASE'
            springCloudVersion = 'Camden.SR1'
	    dockerPluginVersion = '1.2'
            }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://oss.jfrog.org/simple/oss-snapshot-local/"}	
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")        
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.6")
      classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")
       // classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7")
    }
}
plugins {   
    id "org.asciidoctor.convert" version "1.5.3"
}





allprojects {
group = 'pl.java.scalatech'
version = '0.1'
}

subprojects {
apply plugin: 'docker'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'
//apply plugin: 'com.gorylenko.gradle-git-properties'
apply from: 'gradle/sonar.gradle'
apply from: 'gradle/boot.gradle'

sourceSets {
 integrationTest {
    java.srcDir file('src/integTest/java')
    resources.srcDir file('src/integTest/resources')
    compileClasspath = sourceSets.main.output + configurations.testRuntime
    runtimeClasspath = output + compileClasspath
  }
 }
 dependencyManagement {
     imports {
         mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR6"
     }
 }
 
group = 'scalatech'


task buildDocker(type: Docker, dependsOn: assemble) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
    copy {
      from jar
      into "${buildDir}/docker"
    }
  }

}
}


configure(subprojects) {
   
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'application'       
    apply plugin: 'jacoco'

    startScripts.enabled = false
    distZip.enabled = false
    distTar.enabled = false

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    repositories {
        jcenter()
        mavenCentral()
    }
    
dependencies {
    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.2.1'
    compile group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: '3.2.1'
    compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: '3.2.1'
    compile group: 'io.dropwizard.metrics', name: 'metrics-healthchecks', version: '3.2.1'
    compile group: 'io.dropwizard.metrics', name: 'metrics-logback', version: '3.2.1'      
    compile group: 'io.dropwizard.metrics', name: 'metrics-servlets', version: '3.2.1'
    compile group: 'com.ryantenney.metrics', name: 'metrics-spring', version: '3.1.3'
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile group: 'org.jolokia', name: 'jolokia-core', version: '1.3.5'
    compile('org.springframework.boot:spring-boot-starter-web')
    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.9'
    compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.15'
}

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }


test {
    logging.captureStandardOutput(LogLevel.INFO)
    jvmArgs = ['-Dspring.profiles.active=test']
    minHeapSize = '128m'       
    maxHeapSize = "1024m"
    jacoco {
      append = false
      destinationFile = file("$buildDir/jacoco.exec")
  }
  testLogging {
     events 'started', 'passed', 'skipped', 'failed'
  }
  forkEvery = 5
  maxParallelForks = Runtime.runtime.availableProcessors() / 2
}

configurations.archives.artifacts.removeAll { it.archiveTask.is(distZip) || it.archiveTask.is(distTar) }

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "$buildDir/reports/jacoco/html"
    }
		classDirectories = files('build/classes/')
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

task integrationTest(type: Test) {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

project.tasks.findAll { it.name.contains('Zip') }.each { task ->
  logger.info("Removing ${task}")
  project.tasks.remove(task)
}

task wrapper(type: Wrapper) {

}
   
}


